require 'rubygems'
require 'open-uri'
require 'hpricot'
require 'ostruct'

class GenerateGraph
	
  def initialize(build_name)
    @result_url = "http://gbl01058.systems.uk.hsbc:8000/#{build_name}"
    @build_name = build_name
    @xml_name = "chart-#{@build_name}.xml"
    @data = get_data
  end
  
  def process
    File.open(@xml_name, "w") do |f|	  
      f.puts gen_chart_header
      
      f.puts gen_chart_data
      
      f.puts gen_chart_footer
    end
    
    File.open(@xml_name + ".html", "w"){|f| f.puts gen_html }
	  
  end
  
  def get_data
    results = []   
   doc = Hpricot(open(@result_url))
    doc.search("tr").each_with_index do |row,i|
     
     if row.search("td").size != 0
	 if i <= 10
           r = row.search("td")
	total = r[4].inner_text.strip
	passed = r[5].inner_text.strip
	failed = r[6].inner_text.strip
	build = r[0].search("a").inner_text.split("Number")[-1].split("Log").first.strip
	results << OpenStruct.new(:build => build, :total => total, :passed => passed, :failed => failed)
	end
     end
    end
    
    results
  end
  
  def gen_chart_header
	  xml =<<-EOF
  <chart>

	<axis_category shadow='low' size='10' color='FFFFFF' alpha='75' />
	<axis_ticks value_ticks='true' category_ticks='true' minor_count='1' />
	<axis_value shadow='low' size='10' color='FFFFFF' alpha='75' />

	<chart_border top_thickness='0' bottom_thickness='2' left_thickness='2' right_thickness='0' />
	EOF
  end
  
  def gen_chart_footer
	xml =<<-EOF
	<chart_grid_h thickness='1' type='solid' />
	<chart_grid_v thickness='1' type='solid' />
	<chart_rect x='80' y='60' width='320' height='150' positive_color='888888' positive_alpha='50' />
	<chart_pref rotation_x='15' rotation_y='0' min_x='0' max_x='80' min_y='0' max_y='60' />
	<chart_type>stacked 3d column</chart_type>

	<filter>
		<shadow id='high' distance='5' angle='45' alpha='35' blurX='15' blurY='15' />
		<shadow id='low' distance='2' angle='45' alpha='50' blurX='5' blurY='5' />
	</filter>

	<legend shadow='high' x='1' y='1' width='80' height='20' margin='10' fill_color='000000' fill_alpha='7' line_color='000000' line_alpha='0' line_thickness='0' layout='horizontal' size='12' color='000000' alpha='50' />
	<tooltip color='ffffcc' alpha='80' size='12' background_color_1='444488' background_alpha='75' shadow='low' />


	<series_color>
		<color>ADFF2F</color>
		<color>DC143C</color>
	</series_color>
	<series bar_gap='10' set_gap='18' />

	 <draw>
		
		<text shadow='low' transition='dissolve' delay='.5' duration='0.5' color='000022' alpha='60' size='20' x='120' y='23' width='300' height='240'>#{@build_name}</text>
	          <text rotation='-90' color='000022' alpha='30' size='10' x='25' y='160' width='300' height='240'>Number of Tests</text>
		 <text color='000022' alpha='30' size='10' x='25' y='215' width='300' height='240'>Builds</text> 
	</draw>

</chart>
	EOF
  end
  
 def gen_chart_data
  xml = []
  xml << "<chart_data>"
  
  xml << "<row>" 
  xml << "<null/>"
  @data.collect{|d| d.build }.each{|i| xml << "<string>#{i}</string>\n"}  
  xml << "</row>" 

  xml << "<row>"
  xml << "<string>Passed</string>"  
  @data.collect{|d| d.passed }.each_with_index{|i,ind| xml << "<number tooltip='#{i}'>#{i}</number>\n"}  
  xml << "</row>" 
 
  xml << "<row>" 
   xml << "<string>Failed</string>" 
  @data.collect{|d| d.failed }.each{|i| xml << "<number tooltip='#{i}'>#{i}</number>\n"}   
  xml << "</row>" 
  
  xml << "</chart_data>"
  xml.join("\n")	 
 
 end	 

 def gen_html
  html =<<-EOF
  <HTML>
<script language="javascript">AC_FL_RunContent = 0;</script>
<script language="javascript"> DetectFlashVer = 0; </script>
<script src="AC_RunActiveContent.js" language="javascript"></script>
<script language="JavaScript" type="text/javascript">
<!--
var requiredMajorVersion = 10;
var requiredMinorVersion = 0;
var requiredRevision = 45;
-->
</script>
<BODY bgcolor="#FFFFFF">


<script language="JavaScript" type="text/javascript">
<!--
if (AC_FL_RunContent == 0 || DetectFlashVer == 0) {
	alert("This page requires AC_RunActiveContent.js.");
} else {
	var hasRightVersion = DetectFlashVer(requiredMajorVersion, requiredMinorVersion, requiredRevision);
	if(hasRightVersion) { 
		AC_FL_RunContent(
			'codebase', 'http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,45,2',
			'width', '100%',
			'height', '500',
			'scale', 'showAll',
			'salign', 'TL',
			'bgcolor', '#778899',
			'wmode', 'opaque',
			'movie', 'charts',
			'src', 'charts',
			'FlashVars', 'library_path=charts_library&xml_source=#{@xml_name}', 
			'id', 'my_chart',
			'name', 'my_chart',
			'menu', 'true',
			'allowFullScreen', 'true',
			'allowScriptAccess','sameDomain',
			'quality', 'high',
			'align', 'middle',
			'pluginspage', 'http://www.macromedia.com/go/getflashplayer',
			'play', 'true',
			'devicefont', 'false'
			); 
	} else { 
		var alternateContent = 'This content requires the Adobe Flash Player. '
		+ '<u><a href=http://www.macromedia.com/go/getflash/>Get Flash</a></u>.';
		document.write(alternateContent); 
	}
}
// -->
</script>
<noscript>
	<P>This content requires JavaScript.</P>
</noscript>

</BODY>
</HTML>
  EOF
 end
	
end


GenerateGraph.new("Branch-3.2.6-Build-Deploy").process